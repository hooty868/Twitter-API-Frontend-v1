{"remainingRequest":"/Users/Steve/Desktop/finalProject/twiter-project-v1/Twitter-API-Frontend-v1/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/Steve/Desktop/finalProject/twiter-project-v1/Twitter-API-Frontend-v1/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/Steve/Desktop/finalProject/twiter-project-v1/Twitter-API-Frontend-v1/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/Steve/Desktop/finalProject/twiter-project-v1/Twitter-API-Frontend-v1/src/views/main.vue?vue&type=template&id=c9a65f5a&scoped=true&","dependencies":[{"path":"/Users/Steve/Desktop/finalProject/twiter-project-v1/Twitter-API-Frontend-v1/src/views/main.vue","mtime":1608190144391},{"path":"/Users/Steve/Desktop/finalProject/twiter-project-v1/Twitter-API-Frontend-v1/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Steve/Desktop/finalProject/twiter-project-v1/Twitter-API-Frontend-v1/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/Steve/Desktop/finalProject/twiter-project-v1/Twitter-API-Frontend-v1/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Steve/Desktop/finalProject/twiter-project-v1/Twitter-API-Frontend-v1/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGFpbmVyIiB9LCBbCiAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJvdyBoLTEwMCIgfSwgWwogICAgICBfYygKICAgICAgICAiZGl2IiwKICAgICAgICB7IHN0YXRpY0NsYXNzOiAic2V0dGluZy1wYW5uZWwgY29sLTMgaC0xMDAiIH0sCiAgICAgICAgW19jKCJOYXZiYXIiKV0sCiAgICAgICAgMQogICAgICApLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1haW4tY29udGVudCBjb2wgaC0xMDAiIH0sIFsKICAgICAgICBfdm0uX20oMCksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ0d2l0dGVyLWJhciBkLWZsZXgiIH0sIFsKICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAicHJvZmlsZS1hdmF0ZXIiLAogICAgICAgICAgICBhdHRyczogeyBzcmM6ICIvaW1hZ2UvUGhvdG8ucG5nIiwgYWx0OiAiYXZhdGVyIiB9CiAgICAgICAgICB9KSwKICAgICAgICAgIF9jKCJmb3JtIiwgeyBzdGF0aWNDbGFzczogImZvcm0tZ3JvdXAiIH0sIFsKICAgICAgICAgICAgX2MoImlucHV0IiwgewogICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgbmFtZTogIm1vZGVsIiwKICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtbW9kZWwiLAogICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLnR3aXR0ZXIsCiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJ0d2l0dGVyIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJ0d2l0dGVyLWlucHV0IGZvcm0tY29udHJvbCIsCiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGlkOiAidHdpdHRlciIsCiAgICAgICAgICAgICAgICBuYW1lOiAidHdpdHRlciIsCiAgICAgICAgICAgICAgICB0eXBlOiAidHdpdHRlciIsCiAgICAgICAgICAgICAgICBhdXRvY29tcGxldGU6ICJ0d2l0dGVyIiwKICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAi5pyJ5LuA6bq85paw6a6u5LqL77yfIiwKICAgICAgICAgICAgICAgIHJlcXVpcmVkOiAiIiwKICAgICAgICAgICAgICAgIGF1dG9mb2N1czogIiIKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIGRvbVByb3BzOiB7IHZhbHVlOiBfdm0udHdpdHRlciB9LAogICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICBpbnB1dDogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgIGlmICgkZXZlbnQudGFyZ2V0LmNvbXBvc2luZykgewogICAgICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIF92bS50d2l0dGVyID0gJGV2ZW50LnRhcmdldC52YWx1ZQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJidXR0b24iLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJidG4gYnRuLWxnIGJ0bi1zdWJtaXQgYnRuLWJsb2NrIG1iLTMiLAogICAgICAgICAgICAgIGF0dHJzOiB7IHR5cGU6ICJzdWJtaXQiIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiIOaOqOaWhyAiKV0KICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX20oMSkKICAgICAgXSksCiAgICAgIF9jKAogICAgICAgICJkaXYiLAogICAgICAgIHsgc3RhdGljQ2xhc3M6ICJtYWluLWZvbGxvd2VyIGNvbC00IGgtMTAwIiB9LAogICAgICAgIFtfYygiRm9sbG93ZXJzIildLAogICAgICAgIDEKICAgICAgKQogICAgXSkKICBdKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImhlYWRlciIgfSwgW19jKCJwIiwgW192bS5fdigi6aaW6aCBIildKV0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidHdpdHRlci1jYXJkcyB3LTEwMCIgfSwgWwogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbW1lbnRzLWNhcmQgdy0xMDAgZC1mbGV4IiB9LCBbCiAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOiAiY2FyZC1hdmF0ZXIiLAogICAgICAgICAgYXR0cnM6IHsgc3JjOiAiL2ltYWdlL1Bob3RvLnBuZyIsIGFsdDogImF2YXRlciIgfQogICAgICAgIH0pLAogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY2FyZC1jb250ZW50IGZsZXgtZ3Jvdy0xIiB9LCBbCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRlbnQtdGl0bGUgZC1mbGV4IiB9LCBbCiAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInVzZXItbmFtZSIgfSwgW192bS5fdigiQXBwbGUiKV0pLAogICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ1c2VyLWFjY291bnQiIH0sIFtfdm0uX3YoIkBhcHBsZSDCtyIpXSksCiAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogImNvbW1lbnQtZGF0ZSIgfSwgW192bS5fdigiM+Wwj+aZgiIpXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb250ZW50LWRlc2NyaXB0aW9uIiB9LCBbCiAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogImNvbnRlbnQtdGV4dCB3LTEwMCIgfSwgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICIgTnVsbGEgTG9yZW0gbW9sbGl0IGN1cGlkYXRhdCBpcnVyZS4gTGFib3J1bSBtYWduYSBudWxsYSBkdWlzIHVsbGFtY28gY2lsbHVtIGRvbG9yLiBWb2x1cHRhdGUgZXhlcmNpdGF0aW9uIGluY2lkaWR1bnQgYWxpcXVpcCBkZXNlcnVudCByZXByZWhlbmRlcml0IGVsaXQgbGFib3J1bS4gIgogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiYnV0dG9uLXBhbm5lbCBkLWZsZXgiIH0sIFsKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJlcGx5LWJ1dHRvbiBkLWZsZXgiIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaWNvbi1pbWciLAogICAgICAgICAgICAgICAgICBhdHRyczogeyBzcmM6ICIvaW1hZ2UvcmVwbHlfaWNvbi5wbmciLCBhbHQ6ICJpY29uIiB9CiAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInJlcGx5LWNvdW50IiB9LCBbX3ZtLl92KCIxMyIpXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxpa2UtYnV0dG9uIGQtZmxleCIgfSwgWwogICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJpY29uLWltZyIsCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHNyYzogIi9pbWFnZS9saWtlX2ljb24ucG5nIiwgYWx0OiAiaWNvbiIgfQogICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJsaWtlLWNvdW50IiB9LCBbX3ZtLl92KCI0NiIpXSkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb21tZW50cy1jYXJkIHctMTAwIGQtZmxleCIgfSwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBzdGF0aWNDbGFzczogImNhcmQtYXZhdGVyIiwKICAgICAgICAgIGF0dHJzOiB7IHNyYzogIi9pbWFnZS9QaG90by5wbmciLCBhbHQ6ICJhdmF0ZXIiIH0KICAgICAgICB9KSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNhcmQtY29udGVudCBmbGV4LWdyb3ctMSIgfSwgWwogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb250ZW50LXRpdGxlIGQtZmxleCIgfSwgWwogICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ1c2VyLW5hbWUiIH0sIFtfdm0uX3YoIkFwcGxlIildKSwKICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidXNlci1hY2NvdW50IiB9LCBbX3ZtLl92KCJAYXBwbGUgwrciKV0pLAogICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJjb21tZW50LWRhdGUiIH0sIFtfdm0uX3YoIjPlsI/mmYIiKV0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGVudC1kZXNjcmlwdGlvbiIgfSwgWwogICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJjb250ZW50LXRleHQgdy0xMDAiIH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiIE51bGxhIExvcmVtIG1vbGxpdCBjdXBpZGF0YXQgaXJ1cmUuIExhYm9ydW0gbWFnbmEgbnVsbGEgZHVpcyB1bGxhbWNvIGNpbGx1bSBkb2xvci4gVm9sdXB0YXRlIGV4ZXJjaXRhdGlvbiBpbmNpZGlkdW50IGFsaXF1aXAgZGVzZXJ1bnQgcmVwcmVoZW5kZXJpdCBlbGl0IGxhYm9ydW0uICIKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImJ1dHRvbi1wYW5uZWwgZC1mbGV4IiB9LCBbCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyZXBseS1idXR0b24gZC1mbGV4IiB9LCBbCiAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImljb24taW1nIiwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgc3JjOiAiL2ltYWdlL3JlcGx5X2ljb24ucG5nIiwgYWx0OiAiaWNvbiIgfQogICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJyZXBseS1jb3VudCIgfSwgW192bS5fdigiMTMiKV0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsaWtlLWJ1dHRvbiBkLWZsZXgiIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaWNvbi1pbWciLAogICAgICAgICAgICAgICAgICBhdHRyczogeyBzcmM6ICIvaW1hZ2UvbGlrZV9pY29uLnBuZyIsIGFsdDogImljb24iIH0KICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAibGlrZS1jb3VudCIgfSwgW192bS5fdigiNDYiKV0pCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSkKICAgIF0pCiAgfQpdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}