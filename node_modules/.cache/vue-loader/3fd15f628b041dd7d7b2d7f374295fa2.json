{"remainingRequest":"/Users/Steve/Desktop/finalProject/twiter-project-v1/Twitter-API-Frontend-v1/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/Steve/Desktop/finalProject/twiter-project-v1/Twitter-API-Frontend-v1/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/Steve/Desktop/finalProject/twiter-project-v1/Twitter-API-Frontend-v1/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/Steve/Desktop/finalProject/twiter-project-v1/Twitter-API-Frontend-v1/src/views/SignUp.vue?vue&type=template&id=6f83b81c&","dependencies":[{"path":"/Users/Steve/Desktop/finalProject/twiter-project-v1/Twitter-API-Frontend-v1/src/views/SignUp.vue","mtime":1608526508780},{"path":"/Users/Steve/Desktop/finalProject/twiter-project-v1/Twitter-API-Frontend-v1/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Steve/Desktop/finalProject/twiter-project-v1/Twitter-API-Frontend-v1/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/Steve/Desktop/finalProject/twiter-project-v1/Twitter-API-Frontend-v1/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Steve/Desktop/finalProject/twiter-project-v1/Twitter-API-Frontend-v1/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}